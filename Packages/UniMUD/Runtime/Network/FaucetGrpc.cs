// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: faucet.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Faucet {
  /// <summary>
  /// The Faucet Service definition.
  /// </summary>
  public static partial class FaucetService
  {
    static readonly string __ServiceName = "faucet.FaucetService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.DripRequest> __Marshaller_faucet_DripRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.DripRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.DripResponse> __Marshaller_faucet_DripResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.DripResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.DripDevRequest> __Marshaller_faucet_DripDevRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.DripDevRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.TimeUntilDripResponse> __Marshaller_faucet_TimeUntilDripResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.TimeUntilDripResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.GetLinkedTwittersRequest> __Marshaller_faucet_GetLinkedTwittersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.GetLinkedTwittersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.GetLinkedTwittersResponse> __Marshaller_faucet_GetLinkedTwittersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.GetLinkedTwittersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.LinkedTwitterForAddressRequest> __Marshaller_faucet_LinkedTwitterForAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.LinkedTwitterForAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.LinkedTwitterForAddressResponse> __Marshaller_faucet_LinkedTwitterForAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.LinkedTwitterForAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.LinkedAddressForTwitterRequest> __Marshaller_faucet_LinkedAddressForTwitterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.LinkedAddressForTwitterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.LinkedAddressForTwitterResponse> __Marshaller_faucet_LinkedAddressForTwitterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.LinkedAddressForTwitterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.SetLinkedTwitterRequest> __Marshaller_faucet_SetLinkedTwitterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.SetLinkedTwitterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Faucet.SetLinkedTwitterResponse> __Marshaller_faucet_SetLinkedTwitterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Faucet.SetLinkedTwitterResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.DripRequest, global::Faucet.DripResponse> __Method_Drip = new grpc::Method<global::Faucet.DripRequest, global::Faucet.DripResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Drip",
        __Marshaller_faucet_DripRequest,
        __Marshaller_faucet_DripResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.DripDevRequest, global::Faucet.DripResponse> __Method_DripDev = new grpc::Method<global::Faucet.DripDevRequest, global::Faucet.DripResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DripDev",
        __Marshaller_faucet_DripDevRequest,
        __Marshaller_faucet_DripResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.DripRequest, global::Faucet.DripResponse> __Method_DripVerifyTweet = new grpc::Method<global::Faucet.DripRequest, global::Faucet.DripResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DripVerifyTweet",
        __Marshaller_faucet_DripRequest,
        __Marshaller_faucet_DripResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.DripRequest, global::Faucet.TimeUntilDripResponse> __Method_TimeUntilDrip = new grpc::Method<global::Faucet.DripRequest, global::Faucet.TimeUntilDripResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TimeUntilDrip",
        __Marshaller_faucet_DripRequest,
        __Marshaller_faucet_TimeUntilDripResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.GetLinkedTwittersRequest, global::Faucet.GetLinkedTwittersResponse> __Method_GetLinkedTwitters = new grpc::Method<global::Faucet.GetLinkedTwittersRequest, global::Faucet.GetLinkedTwittersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLinkedTwitters",
        __Marshaller_faucet_GetLinkedTwittersRequest,
        __Marshaller_faucet_GetLinkedTwittersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.LinkedTwitterForAddressRequest, global::Faucet.LinkedTwitterForAddressResponse> __Method_GetLinkedTwitterForAddress = new grpc::Method<global::Faucet.LinkedTwitterForAddressRequest, global::Faucet.LinkedTwitterForAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLinkedTwitterForAddress",
        __Marshaller_faucet_LinkedTwitterForAddressRequest,
        __Marshaller_faucet_LinkedTwitterForAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.LinkedAddressForTwitterRequest, global::Faucet.LinkedAddressForTwitterResponse> __Method_GetLinkedAddressForTwitter = new grpc::Method<global::Faucet.LinkedAddressForTwitterRequest, global::Faucet.LinkedAddressForTwitterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLinkedAddressForTwitter",
        __Marshaller_faucet_LinkedAddressForTwitterRequest,
        __Marshaller_faucet_LinkedAddressForTwitterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Faucet.SetLinkedTwitterRequest, global::Faucet.SetLinkedTwitterResponse> __Method_SetLinkedTwitter = new grpc::Method<global::Faucet.SetLinkedTwitterRequest, global::Faucet.SetLinkedTwitterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLinkedTwitter",
        __Marshaller_faucet_SetLinkedTwitterRequest,
        __Marshaller_faucet_SetLinkedTwitterResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Faucet.FaucetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FaucetService</summary>
    [grpc::BindServiceMethod(typeof(FaucetService), "BindService")]
    public abstract partial class FaucetServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.DripResponse> Drip(global::Faucet.DripRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.DripResponse> DripDev(global::Faucet.DripDevRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.DripResponse> DripVerifyTweet(global::Faucet.DripRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.TimeUntilDripResponse> TimeUntilDrip(global::Faucet.DripRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.GetLinkedTwittersResponse> GetLinkedTwitters(global::Faucet.GetLinkedTwittersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.LinkedTwitterForAddressResponse> GetLinkedTwitterForAddress(global::Faucet.LinkedTwitterForAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.LinkedAddressForTwitterResponse> GetLinkedAddressForTwitter(global::Faucet.LinkedAddressForTwitterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Admin utility endpoints for modifying state. Requires a signature with faucet private key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Faucet.SetLinkedTwitterResponse> SetLinkedTwitter(global::Faucet.SetLinkedTwitterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FaucetService</summary>
    public partial class FaucetServiceClient : grpc::ClientBase<FaucetServiceClient>
    {
      /// <summary>Creates a new client for FaucetService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FaucetServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FaucetService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FaucetServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FaucetServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FaucetServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.DripResponse Drip(global::Faucet.DripRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Drip(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.DripResponse Drip(global::Faucet.DripRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Drip, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.DripResponse> DripAsync(global::Faucet.DripRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DripAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.DripResponse> DripAsync(global::Faucet.DripRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Drip, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.DripResponse DripDev(global::Faucet.DripDevRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DripDev(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.DripResponse DripDev(global::Faucet.DripDevRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DripDev, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.DripResponse> DripDevAsync(global::Faucet.DripDevRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DripDevAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.DripResponse> DripDevAsync(global::Faucet.DripDevRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DripDev, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.DripResponse DripVerifyTweet(global::Faucet.DripRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DripVerifyTweet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.DripResponse DripVerifyTweet(global::Faucet.DripRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DripVerifyTweet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.DripResponse> DripVerifyTweetAsync(global::Faucet.DripRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DripVerifyTweetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.DripResponse> DripVerifyTweetAsync(global::Faucet.DripRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DripVerifyTweet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.TimeUntilDripResponse TimeUntilDrip(global::Faucet.DripRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeUntilDrip(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.TimeUntilDripResponse TimeUntilDrip(global::Faucet.DripRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TimeUntilDrip, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.TimeUntilDripResponse> TimeUntilDripAsync(global::Faucet.DripRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeUntilDripAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.TimeUntilDripResponse> TimeUntilDripAsync(global::Faucet.DripRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TimeUntilDrip, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.GetLinkedTwittersResponse GetLinkedTwitters(global::Faucet.GetLinkedTwittersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedTwitters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.GetLinkedTwittersResponse GetLinkedTwitters(global::Faucet.GetLinkedTwittersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLinkedTwitters, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.GetLinkedTwittersResponse> GetLinkedTwittersAsync(global::Faucet.GetLinkedTwittersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedTwittersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.GetLinkedTwittersResponse> GetLinkedTwittersAsync(global::Faucet.GetLinkedTwittersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLinkedTwitters, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.LinkedTwitterForAddressResponse GetLinkedTwitterForAddress(global::Faucet.LinkedTwitterForAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedTwitterForAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.LinkedTwitterForAddressResponse GetLinkedTwitterForAddress(global::Faucet.LinkedTwitterForAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLinkedTwitterForAddress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.LinkedTwitterForAddressResponse> GetLinkedTwitterForAddressAsync(global::Faucet.LinkedTwitterForAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedTwitterForAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.LinkedTwitterForAddressResponse> GetLinkedTwitterForAddressAsync(global::Faucet.LinkedTwitterForAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLinkedTwitterForAddress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.LinkedAddressForTwitterResponse GetLinkedAddressForTwitter(global::Faucet.LinkedAddressForTwitterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedAddressForTwitter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.LinkedAddressForTwitterResponse GetLinkedAddressForTwitter(global::Faucet.LinkedAddressForTwitterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLinkedAddressForTwitter, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.LinkedAddressForTwitterResponse> GetLinkedAddressForTwitterAsync(global::Faucet.LinkedAddressForTwitterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedAddressForTwitterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.LinkedAddressForTwitterResponse> GetLinkedAddressForTwitterAsync(global::Faucet.LinkedAddressForTwitterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLinkedAddressForTwitter, null, options, request);
      }
      /// <summary>
      /// Admin utility endpoints for modifying state. Requires a signature with faucet private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.SetLinkedTwitterResponse SetLinkedTwitter(global::Faucet.SetLinkedTwitterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLinkedTwitter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin utility endpoints for modifying state. Requires a signature with faucet private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Faucet.SetLinkedTwitterResponse SetLinkedTwitter(global::Faucet.SetLinkedTwitterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLinkedTwitter, null, options, request);
      }
      /// <summary>
      /// Admin utility endpoints for modifying state. Requires a signature with faucet private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.SetLinkedTwitterResponse> SetLinkedTwitterAsync(global::Faucet.SetLinkedTwitterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLinkedTwitterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Admin utility endpoints for modifying state. Requires a signature with faucet private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Faucet.SetLinkedTwitterResponse> SetLinkedTwitterAsync(global::Faucet.SetLinkedTwitterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLinkedTwitter, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FaucetServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FaucetServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(FaucetServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Drip, serviceImpl.Drip)
          .AddMethod(__Method_DripDev, serviceImpl.DripDev)
          .AddMethod(__Method_DripVerifyTweet, serviceImpl.DripVerifyTweet)
          .AddMethod(__Method_TimeUntilDrip, serviceImpl.TimeUntilDrip)
          .AddMethod(__Method_GetLinkedTwitters, serviceImpl.GetLinkedTwitters)
          .AddMethod(__Method_GetLinkedTwitterForAddress, serviceImpl.GetLinkedTwitterForAddress)
          .AddMethod(__Method_GetLinkedAddressForTwitter, serviceImpl.GetLinkedAddressForTwitter)
          .AddMethod(__Method_SetLinkedTwitter, serviceImpl.SetLinkedTwitter).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FaucetServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Drip, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.DripRequest, global::Faucet.DripResponse>(serviceImpl.Drip));
      serviceBinder.AddMethod(__Method_DripDev, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.DripDevRequest, global::Faucet.DripResponse>(serviceImpl.DripDev));
      serviceBinder.AddMethod(__Method_DripVerifyTweet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.DripRequest, global::Faucet.DripResponse>(serviceImpl.DripVerifyTweet));
      serviceBinder.AddMethod(__Method_TimeUntilDrip, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.DripRequest, global::Faucet.TimeUntilDripResponse>(serviceImpl.TimeUntilDrip));
      serviceBinder.AddMethod(__Method_GetLinkedTwitters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.GetLinkedTwittersRequest, global::Faucet.GetLinkedTwittersResponse>(serviceImpl.GetLinkedTwitters));
      serviceBinder.AddMethod(__Method_GetLinkedTwitterForAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.LinkedTwitterForAddressRequest, global::Faucet.LinkedTwitterForAddressResponse>(serviceImpl.GetLinkedTwitterForAddress));
      serviceBinder.AddMethod(__Method_GetLinkedAddressForTwitter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.LinkedAddressForTwitterRequest, global::Faucet.LinkedAddressForTwitterResponse>(serviceImpl.GetLinkedAddressForTwitter));
      serviceBinder.AddMethod(__Method_SetLinkedTwitter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Faucet.SetLinkedTwitterRequest, global::Faucet.SetLinkedTwitterResponse>(serviceImpl.SetLinkedTwitter));
    }

  }
}
#endregion
